/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.1/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java' // MODPOINT
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    jrubyc
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava

    implementation 'org.jruby:jruby-complete:9.3.3.0'
    jrubyc 'org.jruby:jruby-complete:9.3.3.0'
}

// directory setup for generated sources
def generatedSrcDir = "$buildDir/generated-src/ruby"

task createDirs {
    doLast {
        mkdir generatedSrcDir
    }
}

task compileRuby(type: JavaExec) {
    classpath = configurations.jrubyc
    main = 'org.jruby.Main'
    args = ['-S', 'jrubyc', '--java', '-t', 'build/generated-src/ruby', 'src/main/ruby']

    // jvm flags for the aot compilations step
    jvmArgs = [
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
        '-Dfile.encoding=UTF-8',
        '-Djruby.compile.mode=OFF'
    ]

    // on windows terminals (at least some locales), things break when Ruby classes are handled on java side due
    // to incorrect line ends. Not sure why, could just be my (possibly broken?) locale setup
    systemProperty 'line.separator', '\n'
    systemProperty 'jruby.compile.mode', 'OFF'
}

compileJava {
    dependsOn compileRuby
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        //resources {
        //    srcDirs = ['src/main/ruby','src/main/java', 'src/main/resources']
        //}

        java {
            srcDir generatedSrcDir // mark compiled Ruby code as a source for the java build
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit4 test framework
            useJUnit('4.13.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.zebtech.App'
}

tasks.withType(TextResource) {
    filteringCharset = 'UTF-8'
    eachFile {
        if (it.file.name.endsWith('*.rb')) {
            // FIXME: this is pretty hacky. Will break some string handling cases!
            filter { line -> line.replace('\r\n', '\n') }
        }
    }
}
